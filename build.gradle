buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Used for gh-pages branch auto-update
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.4.0x"
}

description = 'Jenjin Core IO API'
group = 'com.jenjinstudios'
version = '1.0.0'

// Core plugins
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

// Run integration tests
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Generate updated javadoc and commit it to the gh-pages branch
import org.ajoberstar.grgit.Grgit

task updateJavadoc(dependsOn: javadoc) {
    def repo = Grgit.open(dir: project.file('.'))
    def currentBranch = repo.branch.getCurrent().name
    doFirst {
        repo.checkout(branch: 'gh-pages')
        copy {
            from 'build/docs/javadoc'
            into 'javadoc'
        }
    }
    doLast {
        repo.add(patterns: ['javadoc/'])
        repo.add(patterns: ['javadoc/'], update: true)
        repo.commit(message: "Update Javadocs")
        repo.checkout(branch: currentBranch)
    }
}

tasks.withType(Test) {
    // Integration and Unit tests write reports to separate diretory
    reports.html.destination = file("${reporting.baseDir}/${name}")

    // Show test events
    testLogging.events = ["passed", "skipped", "failed"]
    // Show all logging levels // FIXME Doesn't seem to be working?
    systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'

    // Show starndard output streams from tests
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

repositories {
    mavenCentral();
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile 'com.google.code.gson:gson:2.3.1'

    // Test Dependencies
    testCompile 'org.slf4j:slf4j-jdk14:1.7.12' // For logging purposes

    // Integration Test dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'

    // Unit Test Dependencies
    testCompile 'org.spockframework:spock-maven:0.7-groovy-2.0'
    testCompile 'cglib:cglib:3.2.0'
}

def sonatypeUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : System.getenv('sonatypeUsername')
def sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('sonatypePassword')


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Jenjin-IO'
                packaging 'jar'
                description 'Jenjin-IO is a simple tool for creating stateful client-server connections'
                url 'http://floralvikings.github.io/jenjin-io/'

                scm {
                    url 'scm:git@github.com:floralvikings/jenjin-io.git'
                    connection 'scm:git@github.com:floralvikings/jenjin-io.git'
                    developerConnection 'scm:git@github.com:floralvikings/jenjin-io.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://raw.githubusercontent.com/floralvikings/jenjin-io/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'floralvikings'
                        name 'Caleb Brinkman'
                    }
                }
            }
        }
    }
}
