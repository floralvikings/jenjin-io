description = 'Jenjin Core IO API'

apply plugin: 'java'
apply plugin: 'groovy'
sourceCompatibility = 1.8
version = '0.0.0'

repositories {
    mavenCentral();
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile 'com.google.code.gson:gson:2.3.1'

    // Test dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.slf4j:slf4j-jdk14:1.7.12'

    // Spock Changeover
    testCompile 'org.spockframework:spock-maven:0.7-groovy-2.0'
    testCompile 'cglib:cglib:3.2.0'
}

test {
    def debugOn = false;
    if (project.hasProperty('logOptions')) {
        if (logOptions instanceof String && ((String) logOptions) == "debug") {
            debugOn = true;
        }
    }
    if (debugOn) {
        testLogging.events = ["passed", "skipped", "failed"]
        // FIXME Doesn't seem to be working?
        systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'
        testLogging.showStandardStreams = true
    } else {
        testLogging.events = ["passed", "skipped", "failed"]
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
    testLogging.events = ["passed", "skipped", "failed"]
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Javadoc copy to gh-pages
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

import org.ajoberstar.grgit.Grgit

task updateJavadoc(dependsOn: javadoc) {
    def repo = Grgit.open(dir: project.file('.'))
    def currentBranch = repo.branch.getCurrent().name
    doFirst {
        repo.checkout(branch: 'gh-pages')
        copy {
            from 'build/docs/javadoc'
            into 'javadoc'
        }
    }
    doLast {
        repo.add(patterns: ['javadoc/'])
        repo.add(patterns: ['javadoc/'], update: true)
        repo.commit(message: "Update Javadocs")
        repo.checkout(branch: currentBranch)
    }
}