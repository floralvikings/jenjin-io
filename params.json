{"name":"Jenjin-io","tagline":"IO Utilities for Client/Server Connections","body":"# jenjin-io\r\nIO Utilities for Client/Server Connections\r\n\r\n## Usage\r\n\r\nThe core of the Jenjin-IO Framework is the ```Connection``` class.  A ```Connection``` requires four components to\r\noperate:\r\n\r\n1. An ```ExecutionContext``` implementation - the ```ExecutionContext``` is a object storing connection-specific data\r\n   that is persistent across messages.  Since this object is accessed by multiple threads, you should take care that any\r\n   data contained therein is thread-safe.\r\n2. A ```MessageReader``` that will read data from an ```InputStream``` and attempt to deserialize it into an \r\n   implementation of the ```Message``` interface.\r\n3. A ```MessageWriter``` that will attempt to serialize an implementation of the ```Message``` interface into a format\r\n   that can be written into an ```OutputStream```.\r\n4. An optional ```BiConsumer``` that will be used as a callback function if an error is encountered when reading,\r\n   writing, or executing a ```Message``` implementation.\r\n   \r\nWhen the ```start``` method is called, four threads are started with the following periodic tasks:\r\n\r\n1. **Read Thread**\r\n  * Reads from the ```MessageReader```, storing the resulting ```Message``` object in a special, thread-safe queue that\r\n    is accessed by the other ```Connection``` threads.\r\n2. **Write Thread**\r\n  * Writes any outgoing ```Message``` implementations created by the ```ExecutionThread``` to an ```OutputStream```\r\n    using the ```MessageWriter```\r\n3. **Execution Thread**\r\n  * Processes ```Message``` objects which have been read by the **Read Thread** by calling ```execute``` on them, \r\n    passing in the ```ExecutionContext``` object.  The return value of ```execute``` is then stored for the \r\n    **Write Thread** to later write.\r\n4. **Error Thread**\r\n  * Continually monitors the other threads for any thrown exceptions (by examining the shared queue) and logs them, \r\n    then, if it exists, invokes the specified ```BiConsumer``` with the ```Connection``` and  ```Throwable```.\r\n   \r\n\r\n## License\r\n\r\nJenjin-IO is licensed under the [MIT license](https://github.com/floralvikings/jenjin-io/blob/master/LICENSE)\r\n","google":"UA-67700107-1","note":"Don't delete this file! It's used internally to help with page regeneration."}